[
  {
    "timestamp": "2016-09-03 12:00:00.782086", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncc_impl_main.c: In function \u2018test_correct_number_sentences\u2019:\ncc_impl_main.c:35:20: warning: implicit declaration of function \u2018strlen\u2019 [-Wimplicit-function-declaration]\n         success &= strlen(output[i]) == 10;\n                    ^\ncc_impl_main.c:35:20: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\ncc_impl_main.c:35:20: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncc_impl_main.c: In function \u2018test_correct_number_words\u2019:\ncc_impl_main.c:49:16: warning: implicit declaration of function \u2018strcmp\u2019 [-Wimplicit-function-declaration]\n     success &= strcmp(output[0], correct_output[0]);\n                ^\ncc_impl_main.c: In function \u2018test_multiple_punc_edge_case\u2019:\ncc_impl_main.c:78:16: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\n     success &= strlen(output[0]) == 10;\n                ^\ncc_impl_main.c:78:16: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncc_impl_main.c: In function \u2018test_incomplete_sentences\u2019:\ncc_impl_main.c:91:16: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\n     success &= strlen(output[0]) == 10;\n                ^\ncc_impl_main.c:91:16: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationNullTerminated", 
        "description": "Test that camelCaser returns NULL when given NULL"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationLastElementNull", 
        "description": "Test that camelCaser returns an array that is null terminated"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationCorrectNumberSentences", 
        "description": "Test that camelCaser returns an array with the correct number of elements"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationCorrectNumberWords", 
        "description": "Test that camelCaser returns an array with elements that are the correct length"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationCorrectCapitals", 
        "description": "Test that camelCaser returns sentences with the correct capitalization"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationMultiplePunc", 
        "description": "Test that camelCaser returns a correct array with edge case punctuation and spaces"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "implementationIncompleteSentences", 
        "description": "Test that camelCaser returns output where incomplete sentences are ignored"
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsEarned": 1.0, 
        "ptsPossible": 1.0, 
        "name": "Function1", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function2", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function3", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsEarned": 1.0, 
        "ptsPossible": 1.0, 
        "name": "Function4", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function5", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function6", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsEarned": 1.0, 
        "ptsPossible": 1.0, 
        "name": "Function7", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsEarned": 1.0, 
        "ptsPossible": 1.0, 
        "name": "Function8", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function9", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsEarned": -1.0, 
        "ptsPossible": 1.0, 
        "name": "Function10", 
        "description": "Mysterious camelCaser implementation..."
      }
    ], 
    "revision": "4400", 
    "checksum": "b653378ff3801b4b747544c0c00b5ab3c8c602ad  camelCaser.c\n8079fd0388c67dee379661f51850001241a4f27f  camelCaser_tests.c"
  }, 
  {
    "timestamp": "2016-09-04 12:00:00.806657", 
    "testcases": [
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns NULL when given NULL", 
        "name": "implementationNullTerminated", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncc_impl_main.c: In function \u2018test_correct_number_sentences\u2019:\ncc_impl_main.c:35:20: warning: implicit declaration of function \u2018strlen\u2019 [-Wimplicit-function-declaration]\n         success &= strlen(output[i]) == 10;\n                    ^\ncc_impl_main.c:35:20: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\ncc_impl_main.c:35:20: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncc_impl_main.c: In function \u2018test_correct_number_words\u2019:\ncc_impl_main.c:49:16: warning: implicit declaration of function \u2018strcmp\u2019 [-Wimplicit-function-declaration]\n     success &= strcmp(output[0], correct_output[0]);\n                ^\ncc_impl_main.c: In function \u2018test_multiple_punc_edge_case\u2019:\ncc_impl_main.c:78:16: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\n     success &= strlen(output[0]) == 10;\n                ^\ncc_impl_main.c:78:16: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncc_impl_main.c: In function \u2018test_incomplete_sentences\u2019:\ncc_impl_main.c:91:16: warning: incompatible implicit declaration of built-in function \u2018strlen\u2019\n     success &= strlen(output[0]) == 10;\n                ^\ncc_impl_main.c:91:16: note: include \u2018<string.h>\u2019 or provide a declaration of \u2018strlen\u2019\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns an array that is null terminated", 
        "name": "implementationLastElementNull", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns an array with the correct number of elements", 
        "name": "implementationCorrectNumberSentences", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns an array with elements that are the correct length", 
        "name": "implementationCorrectNumberWords", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns sentences with the correct capitalization", 
        "name": "implementationCorrectCapitals", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns a correct array with edge case punctuation and spaces", 
        "name": "implementationMultiplePunc", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test that camelCaser returns output where incomplete sentences are ignored", 
        "name": "implementationIncompleteSentences", 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function1", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code.."
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function2", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function3", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function4", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code.."
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function5", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function6", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function7", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code.."
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function8", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code.."
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function9", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "description": "Mysterious camelCaser implementation...", 
        "name": "Function10", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test"
      }
    ], 
    "checksum": "b653378ff3801b4b747544c0c00b5ab3c8c602ad  camelCaser.c\n8079fd0388c67dee379661f51850001241a4f27f  camelCaser_tests.c", 
    "revision": "5079"
  }, 
  {
    "timestamp": "2016-09-05 12:00:00.778602", 
    "testcases": [
      {
        "description": "Test that camelCaser returns NULL when given NULL", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationNullTerminated", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns an array that is null terminated", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationLastElementNull", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns an array with the correct number of elements", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationCorrectNumberSentences", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns an array with elements that are the correct length", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationCorrectNumberWords", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns sentences with the correct capitalization", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationCorrectCapitals", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns a correct array with edge case punctuation and spaces", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationMultiplePunc", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test that camelCaser returns output where incomplete sentences are ignored", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "name": "implementationIncompleteSentences", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "Function1", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function2", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function3", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "Function4", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function5", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function6", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "Function7", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": 1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "name": "Function8", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function9", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Mysterious camelCaser implementation...", 
        "ptsEarned": -1.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "name": "Function10", 
        "ptsPossible": 1.0
      }
    ], 
    "revision": "6394", 
    "checksum": "b653378ff3801b4b747544c0c00b5ab3c8c602ad  camelCaser.c\n8079fd0388c67dee379661f51850001241a4f27f  camelCaser_tests.c"
  }, 
  {
    "timestamp": "2016-09-06 12:00:00.771462", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationNullTerminated", 
        "description": "Test that camelCaser returns NULL when given NULL"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationLastElementNull", 
        "description": "Test that camelCaser returns an array that is null terminated"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationCorrectNumberSentences", 
        "description": "Test that camelCaser returns an array with the correct number of elements"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationCorrectNumberWords", 
        "description": "Test that camelCaser returns an array with elements that are the correct length"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationCorrectCapitals", 
        "description": "Test that camelCaser returns sentences with the correct capitalization"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationMultiplePunc", 
        "description": "Test that camelCaser returns a correct array with edge case punctuation and spaces"
      }, 
      {
        "log": "Trying to compile your code...\nFAILED TO COMPILE!\ncamelCaser.c: In function \u2018camel_caser\u2019:\ncamelCaser.c:16:2: error: unknown type name \u2018bool\u2019\n  bool firstInWord = false; //if first letter in a word\n  ^\ncamelCaser.c:16:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool firstInWord = false; //if first letter in a word\n                     ^\ncamelCaser.c:16:21: note: each undeclared identifier is reported only once for each function it appears in\ncamelCaser.c:30:16: warning: implicit declaration of function \u2018getCamelCase\u2019 [-Wimplicit-function-declaration]\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c:30:16: warning: initialization makes pointer from integer without a cast [-Wint-conversion]\ncamelCaser.c: At top level:\ncamelCaser.c:40:8: error: conflicting types for \u2018getCamelCase\u2019\n char * getCamelCase(const char * input_str, int start, int end, int sentLen) {\n        ^\ncamelCaser.c:30:16: note: previous implicit declaration of \u2018getCamelCase\u2019 was here\n  char * TEST = getCamelCase(\"Y es. Bob.\", 0, 3, 3);\n                ^\ncamelCaser.c: In function \u2018getCamelCase\u2019:\ncamelCaser.c:44:2: error: unknown type name \u2018bool\u2019\n  bool nextIsUpper = false;\n  ^\ncamelCaser.c:44:21: error: \u2018false\u2019 undeclared (first use in this function)\n  bool nextIsUpper = false;\n                     ^\ncamelCaser.c:45:2: error: unknown type name \u2018bool\u2019\n  bool writtenThings = false;\n  ^\ncamelCaser.c:47:6: warning: implicit declaration of function \u2018isspace\u2019 [-Wimplicit-function-declaration]\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n      ^\ncamelCaser.c:47:64: error: \u2018true\u2019 undeclared (first use in this function)\n   if(isspace(input_str[start]) && writtenThings) nextIsUpper = true;\n                                                                ^\ncamelCaser.c:49:6: warning: implicit declaration of function \u2018isalpha\u2019 [-Wimplicit-function-declaration]\n   if(isalpha(input_str[start])) {\n      ^\ncamelCaser.c:50:49: error: request for member \u2018toupper\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                 ^\ncamelCaser.c:50:78: error: request for member \u2018tolower\u2019 in something not a structure or union\n    output[i++] = (nextIsUpper ? input_str[start].toupper() : input_str[start].tolower());\n                                                                              ^\nmake: *** [camelCaser.o] Error 1\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "name": "implementationIncompleteSentences", 
        "description": "Test that camelCaser returns output where incomplete sentences are ignored"
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "Function1", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function2", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function3", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "Function4", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function5", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function6", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "Function7", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "Function8", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function9", 
        "description": "Mysterious camelCaser implementation..."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\nFailed test", 
        "ptsPossible": 1.0, 
        "ptsEarned": -1.0, 
        "name": "Function10", 
        "description": "Mysterious camelCaser implementation..."
      }
    ], 
    "checksum": "b653378ff3801b4b747544c0c00b5ab3c8c602ad  camelCaser.c\n8079fd0388c67dee379661f51850001241a4f27f  camelCaser_tests.c", 
    "revision": "8217"
  }
]