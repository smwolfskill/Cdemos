/**
 * Parallel Make
 * CS 241 - Fall 2016
 */
#include <unistd.h> //for getopt
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "parmake.h"

int numThreads = 1; //default for opt. -j
char* makefile = "./makefile"; //default for opt. -f. If DNE, try "./Makefile"
char** targets = NULL; //last option
int numTargets = 0;

int stringToInt(char* str) { //only works for positive ints, but that's all we need
	int len = strlen(str);
	int i = len - 1;
	int mul = 1;
	int num = 0;
	while(i >= 0) {
		num += mul * ((int) str[i] - (int) '0');
		i--;
		mul *= 10;
	}
	return num;
}

// Treat this as main
int parmake(int argc, char **argv) {
	//opterr = 0; //set to 0 if don't want getopt to print err msgs
	//1. Get arguments using getopt
	int c;
	short argF = 0;
	while ((c = getopt (argc, argv, "f:j:")) != -1) {
		switch (c) {
			case 'f': makefile = optarg;
					argF = 1;
					break;
			case 'j': //numThreads = (int) optarg[0] - ((int) '0');
					numThreads = stringToInt(optarg);
					break;
		}
	}
	//1.1 Get optional target arg(s) manually
	int i = optind;
	numTargets = argc-optind;
	int targetIndex = 0;
	while(i < argc) {
		if(!targets) targets = malloc(numTargets*sizeof(char*));
		targets[targetIndex] = argv[i];
		//printf("target %d: %s;\n", targetIndex, targets[targetIndex]);
		i++;
		targetIndex++;
	}
	printf("input: numThreads = %d; makefile = %s; numTargets = %d\n", numThreads, makefile, numTargets);
	//1.2 Error-checking: Make sure can open/read Makefile
	FILE* makeFd = fopen(makefile, "r");
	if(!makeFd) {
		if(argF) {
			fprintf(stderr, "Cannot open/read specified Makefile '%s'. Done.\n", makefile);
			return 1; //cannot open/read user-specified Makefile
		}
		makefile = "./Makefile";
		makeFd = fopen(makefile, "r");
		if(!makeFd) {
			fprintf(stderr, "'./makefile' and './Makefile' not found; did you mean to specify one?\nUsage: ./parmake -f <Makefile> -j <numThreads> <target1> ...\n");
			return 2; //"./makefile" and "./Makefile" DNE
		}
	}
	printf("Success opening '%s'.\n", makefile);
	//2. Parse Makefile
	
	
	return 0;
}
